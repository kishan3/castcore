# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-07-02 11:51
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_hstore.fields
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
        ('cities', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, help_text='Should be valid email, e.g. name@example.com', max_length=254, null=True, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, help_text='John', max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, help_text='Doe', max_length=100, null=True, verbose_name='Last Name')),
                ('user_type', models.CharField(choices=[('P', 'Person'), ('C', 'Company')], default='P', max_length=1)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, help_text="User's phone number.", max_length=10, null=True, unique=True)),
                ('date_of_birth', models.DateField(blank=True, help_text='This can be date of incorporation in case of house or company.', null=True)),
                ('email_daily_updates', models.BooleanField(default=False, help_text='Whether to mail updates daily?')),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Bio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django_hstore.fields.DictionaryField(editable=False, null=True)),
                ('zipcode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cities.PostalCode')),
            ],
        ),
        migrations.CreateModel(
            name='CompanyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_type', models.CharField(choices=[('production_house', 'production house')], default='production_house', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(blank=True, help_text='Date when person started the course.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Date when person ended the course.', null=True)),
                ('degree', models.CharField(blank=True, help_text='Educational degree for e.g BTech, M.sc, B.Com etc.', max_length=255, null=True)),
                ('grade', models.CharField(blank=True, help_text='Grade for e.g A+, B+, first class , distinction etc.', max_length=20, null=True)),
                ('field_of_study', models.CharField(blank=True, help_text='In which stream of course degree was achieved.', max_length=50, null=True)),
                ('social_activites', models.TextField(blank=True, help_text="Description about user's extracurricular and other social activites.", null=True)),
                ('description', models.TextField(blank=True, help_text="Description for user's Education in detail.", null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('production_house', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(blank=True, help_text='Name for the project experience for ex. Sherlock Holmes.', max_length=255, null=True)),
                ('role', models.CharField(blank=True, help_text='For eg. lead character, supporting character, background dancer etc.', max_length=255, null=True)),
                ('character_name', models.CharField(blank=True, help_text='Name of character.', max_length=255, null=True)),
                ('experience_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Film'), (2, 'Tvshow'), (3, 'Advertise'), (4, 'Internet'), (5, 'Other')], null=True)),
                ('start_date', models.DateField(blank=True, help_text='Date when person started the course.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Date when person ended the course.', null=True)),
                ('description', models.TextField(blank=True, help_text="Desctiption about user's experience.", null=True)),
                ('location', models.ForeignKey(blank=True, help_text="Location of user's project experience.", null=True, on_delete=django.db.models.deletion.CASCADE, to='cities.City')),
            ],
        ),
        migrations.CreateModel(
            name='Institute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institute_name', models.CharField(blank=True, max_length=255, null=True)),
                ('established_year', models.DateField(blank=True, help_text='Date when institute was established.', null=True)),
                ('location', models.ForeignKey(blank=True, help_text='Location of institute.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='institute_cities', to='cities.City')),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_name', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PersonType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person_type', models.CharField(choices=[('talent', 'Talent'), ('director', 'Director'), ('casting_director', 'Casting_Director')], default='talent', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='SearchableField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(help_text='model name on which search is performed.', max_length=255)),
                ('field_name', models.CharField(help_text='field of the model on which search is performed.', max_length=255)),
                ('value', models.CharField(help_text='Value for this field.', max_length=255)),
                ('data', django_hstore.fields.DictionaryField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_name', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserInvites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('email', models.EmailField(help_text='Should be valid email, e.g. john@example.com', max_length=255, verbose_name='Email Address To Invite')),
                ('date_invited', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time when user registered.', verbose_name='Date Invitation Sent')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('company_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('company_phone', models.CharField(blank=True, help_text="Company's phone number object.", max_length=10, null=True, unique=True)),
                ('company_website', models.URLField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('users.user',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default='M', max_length=1)),
                ('associated_with_agent', models.BooleanField(default=False, help_text='Whether user has agents working for him/her?')),
                ('typ', models.ManyToManyField(related_name='persons', related_query_name='person', to='users.PersonType')),
            ],
            options={
                'abstract': False,
            },
            bases=('users.user',),
        ),
        migrations.AddField(
            model_name='userinvites',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations_sent', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='education',
            name='institute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='educations', related_query_name='education', to='users.Institute'),
        ),
        migrations.AddField(
            model_name='user',
            name='city',
            field=models.ForeignKey(blank=True, help_text='City where user or company resides.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='city', to='cities.City'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='nationality',
            field=models.ForeignKey(blank=True, help_text='This will be location of head office in case of production house or company.', null=True, on_delete=django.db.models.deletion.CASCADE, to='cities.Country'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='userinvites',
            unique_together=set([('user', 'email')]),
        ),
        migrations.AddField(
            model_name='skill',
            name='person',
            field=models.ManyToManyField(related_name='skills', related_query_name='skill', to='users.Person'),
        ),
        migrations.AddField(
            model_name='language',
            name='person',
            field=models.ManyToManyField(related_name='known_languages', related_query_name='known_language', to='users.Person'),
        ),
        migrations.AddField(
            model_name='experience',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiences', related_query_name='experience', to='users.Person'),
        ),
        migrations.AddField(
            model_name='education',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='educations', related_query_name='education', to='users.Person'),
        ),
        migrations.AddField(
            model_name='company',
            name='members',
            field=models.ManyToManyField(related_name='companies', related_query_name='company', to='users.Person'),
        ),
        migrations.AddField(
            model_name='company',
            name='typ',
            field=models.ManyToManyField(related_name='companies', to='users.CompanyType'),
        ),
        migrations.AddField(
            model_name='bio',
            name='person',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bio', related_query_name='bio', to='users.Person'),
        ),
    ]
